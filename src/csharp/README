preparation
===========

link generated headers to 'lxr/'

> $ ln -s ../../../BUILD/src/lxr/ lxr


compile
=======

swig -csharp -dllimport elykseer-crypto-cs -namespace lxr md5.i 
swig -csharp -dllimport elykseer-crypto-cs -namespace lxr key128.i 
swig -csharp -dllimport elykseer-crypto-cs -namespace lxr key256.i 
swig -csharp -dllimport elykseer-crypto-cs -namespace lxr sha256.i 
swig -csharp -dllimport elykseer-crypto-cs -namespace lxr aes.i 


gcc -o libelykseer-crypto-cs.so -shared -fpic \
   md5_wrap.c \
   key128_wrap.c \
   key256_wrap.c \
   sha256_wrap.c \
   aes_wrap.c \
   -I. \
   -L ../../../BUILD/src/ -lelykseer-crypto_Debug \
   -Wl,-rpath=../../../BUILD/src/

cc -o libelykseer-crypto-cs.dylib -dynamiclib -fpic \
   md5_wrap.c \
   key128_wrap.c \
   key256_wrap.c \
   sha256_wrap.c \
   aes_wrap.c \
   -I. \

example
=======

csc -target:library -out:libelykseer-crypto-cs.dll [A-Z]*.cs

csc -target:exe -out:runme.exe -reference:libelykseer-crypto-cs.dll  runme.cs

mono runme.exe

mono --profile=log runme.exe
mprof-report output.mlpd

